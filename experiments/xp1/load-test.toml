[master]
# The host IP/port to which to bind the master
bind = "{{ .PRIVATE_IP }}:26670"

# How many slaves to expect to connect before starting the load test
expect_slaves = {{ .whitewalkers }}

# How long to wait for slaves to connect before considering the load test a
# failure (if not all slaves have connected within this time period)
expect_slaves_within = "1m"

# A time period to wait after successful completion of the load testing before
# completely shutting the master down. This is useful in case one wants to allow
# for external polling of the Prometheus stats endpoint after successful
# completion of testing for a while.
wait_after_finished = "10s"

    [master.auth]
    # Is basic HTTP authentication enabled when attempting to access the master?
    enabled = false
    # Username to use in basic HTTP authentication.
    username = "loadtestuser"
    # The bcrypt hash of the password required to validate slaves. NOTE: Try not
    # to use bcrypt cost factors above 8 - this slows down progress updates to
    # the master significantly. 
    password_hash = "$2a$08$rd8XKT/IO1a7MqcobrGX0epg05Z6/fEPopygo9G6yWuq4xLz8uhxq"

[slave]
# The IP address/port to which to bind the slave node. Leave out the port to
# pick a random port.
bind = "127.0.0.1:"

# HTTP address by which the master can be reached. If the master requires
# authentication, include the username:password in the URL below. Alternatively,
# include the username and password in the TMLOADTEST_MASTER_USERNAME and
# TMLOADTEST_MASTER_PASSWORD environment variables when running the slave.
master = "http://{{ .NIGHTKING_IP }}:26670"

# How long to keep polling for the master before considering the master to have
# failed to start up at all.
expect_master_within = "1m"

# After being accepted by the master, this defines how long to keep polling the
# master for a "GO!" message. After this period, the slave considers the whole
# test a failure.
expect_start_within = "1m"

# A time period to wait after successful completion of the load testing before
# completely shutting the slave down. This is useful in case one wants to allow
# for external polling of the Prometheus stats endpoint after successful
# completion of testing for a while.
wait_after_finished = "10s"

[test_network]

    [test_network.autodetect]
    # Set to true if you want the test network's nodes to be automatically
    # detected from a single Tendermint node. The master will poll the
    # seed_node for other peers to use as targets.
    enabled = true

    # If test_network.autodetect.enabled is set to true, this seed_node address
    # will be used to try to obtain a list of targets for load testing.
    seed_node = "http://127.0.0.1:26657"

    # If test_network.autodetect.enabled is set to true, this is how many
    # targets to expect prior to starting the load testing.
    expect_targets = {{ .starks }}

    # The maximum time to wait while polling the seed_node for the required
    # number of targets before considering the entire load test a failure.
    expect_targets_within = "3m"

    # Whether or not to consider the seed node as part of the test network.
    target_seed_node = false

[clients]
# What type of client to spawn. The `kvstore-http` client will interact with the
# `kvstore` ABCI application via the HTTP RPC on the nodes.
type = "kvstore-http"

# Additional parameters specific to this particular type of client.
additional_params = ""

# The number of clients to spawn per slave.
spawn = 50

# The rate at which new clients should be spawned on each slave, per second. A
# value of 10 would mean that every second, 10 new clients will be spawned on
# each slave. A value of 0.1 would mean that only 1 client will be spawned every
# 10 seconds.
spawn_rate = 10.0

# The maximum number of interactions to send, per client. Set to -1 to make this
# "infinite", but then the `max_test_time` parameter MUST be set.
max_interactions = 100

# After how long do we consider an interaction to have timed out?
interaction_timeout = "11s"

# The maximum amount of time to allow for load testing. If this is exceeded,
# the test will gracefully be brought to an end.
max_test_time = "10m"

#
# Request-related parameters
#
# Note: it is up to the particular client implementation to honour these
# parameters.
#

# The maximum time to wait before each request in an interaction.
request_wait_min = "0ms"

# The minimum time to wait before request in an interaction.
request_wait_max = "0ms"

# After how long do we consider a request to have timed out?
request_timeout = "5s"
